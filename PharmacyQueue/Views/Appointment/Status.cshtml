@model PharmacyQueue.Models.Appointment

@{
    ViewData["Title"] = "Queue Status";
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Queue Status</h3>
                </div>
                <div class="card-body">
                    @if (Model == null)
                    {
                        <div id="searchForm">
                            <div class="mb-3">
                                <label for="queueNumber" class="form-label">Enter Your Queue Number</label>
                                <input type="text" id="queueNumber" class="form-control" 
                                       placeholder="e.g., PHAR-20240321-001" required />
                            </div>
                            @if (ViewBag.Error != null)
                            {
                                <div class="alert alert-danger">
                                    @ViewBag.Error
                                </div>
                            }
                            <div id="errorMessage" class="alert alert-danger d-none"></div>
                            <div class="text-center">
                                <button type="button" onclick="checkStatus()" class="btn btn-primary">Check Status</button>
                            </div>
                        </div>
                    }
                    <div id="queueStatus" class="@(Model == null ? "d-none" : "")">
                        <div class="text-center mb-4">
                            <h4>Queue Number: <span class="text-primary" id="displayQueueNumber">@(Model?.QueueNumber ?? "")</span></h4>
                        </div>
                        <div id="waitingInfo" class="row">
                            <div class="col-md-6">
                                <div class="alert alert-info">
                                    <h5>People Ahead: <span id="peopleAhead">Loading...</span></h5>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="alert alert-warning">
                                    <h5>Wait Time: <span id="waitTime">Loading...</span></h5>
                                    <div id="countdown" class="mt-2"></div>
                                </div>
                            </div>
                        </div>
                        <div class="alert mt-3" id="statusAlert">
                            <p>Status: <span id="status" class="font-weight-bold">Loading...</span></p>
                            <p class="mb-0">Last Updated: <span id="lastUpdated">Loading...</span></p>
                        </div>
                        <div class="text-center mt-3">
                            <button type="button" onclick="showSearchForm()" class="btn btn-primary">Check Another Queue</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let countdownInterval;
        let endTime;

        function showSearchForm() {
            document.getElementById('searchForm').classList.remove('d-none');
            document.getElementById('queueStatus').classList.add('d-none');
            document.getElementById('queueNumber').value = '';
            if (countdownInterval) {
                clearInterval(countdownInterval);
            }
        }

        function checkStatus() {
            const queueNumber = document.getElementById('queueNumber').value;
            if (!queueNumber) {
                document.getElementById('errorMessage').textContent = 'Please enter a queue number';
                document.getElementById('errorMessage').classList.remove('d-none');
                return;
            }

            // Update URL without refreshing
            window.history.pushState({}, '', `/Appointment/Status?queueNumber=${queueNumber}`);
            
            document.getElementById('displayQueueNumber').textContent = queueNumber;
            document.getElementById('searchForm').classList.add('d-none');
            document.getElementById('queueStatus').classList.remove('d-none');
            document.getElementById('errorMessage').classList.add('d-none');
            
            updateQueueStatus(queueNumber);
        }

        function updateQueueStatus(queueNumber) {
            fetch(`/api/Queue/status/${queueNumber}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Queue number not found');
                    }
                    return response.json();
                })
                .then(data => {
                    const waitingInfo = document.getElementById('waitingInfo');
                    const statusAlert = document.getElementById('statusAlert');
                    const statusElement = document.getElementById('status');
                    const countdownElement = document.getElementById('countdown');
                    
                    // Update status alert class based on status
                    switch(data.status) {
                        case 0: // Waiting
                            statusAlert.className = 'alert alert-info mt-3';
                            statusElement.textContent = 'Waiting';
                            statusElement.className = 'font-weight-bold';
                            waitingInfo.style.display = 'flex';
                            
                            document.getElementById('peopleAhead').textContent = data.peopleAhead;
                            let waitTimeText = data.estimatedWaitTime === 0 
                                ? "No wait time" 
                                : `${data.estimatedWaitTime} minutes`;
                            document.getElementById('waitTime').textContent = waitTimeText;
                            
                            if (data.estimatedWaitTime > 0) {
                                if (countdownInterval) {
                                    clearInterval(countdownInterval);
                                }
                                endTime = new Date(Date.now() + data.estimatedWaitTime * 60000);
                                updateCountdown();
                                countdownInterval = setInterval(updateCountdown, 1000);
                            } else {
                                countdownElement.textContent = "You're next!";
                            }
                            break;
                            
                        case 1: // InProgress
                            statusAlert.className = 'alert alert-primary mt-3';
                            statusElement.textContent = 'In Progress';
                            statusElement.className = 'font-weight-bold';
                            waitingInfo.style.display = 'none';
                            countdownElement.textContent = 'Your appointment is currently in progress';
                            if (countdownInterval) clearInterval(countdownInterval);
                            break;
                            
                        case 2: // Completed
                            statusAlert.className = 'alert alert-success mt-3';
                            statusElement.textContent = 'Completed';
                            statusElement.className = 'font-weight-bold';
                            waitingInfo.style.display = 'none';
                            countdownElement.textContent = 'Your appointment has been completed';
                            if (countdownInterval) clearInterval(countdownInterval);
                            break;
                            
                        case 3: // Cancelled
                            statusAlert.className = 'alert alert-danger mt-3';
                            statusElement.textContent = 'Cancelled';
                            statusElement.className = 'font-weight-bold';
                            waitingInfo.style.display = 'none';
                            countdownElement.textContent = 'This appointment has been cancelled';
                            if (countdownInterval) clearInterval(countdownInterval);
                            break;
                            
                        case 4: // NoShow
                            statusAlert.className = 'alert alert-warning mt-3';
                            statusElement.textContent = 'No Show';
                            statusElement.className = 'font-weight-bold';
                            waitingInfo.style.display = 'none';
                            countdownElement.textContent = 'You missed your appointment';
                            if (countdownInterval) clearInterval(countdownInterval);
                            break;
                    }
                    
                    document.getElementById('lastUpdated').textContent = 
                        new Date(data.lastUpdated).toLocaleTimeString();
                })
                .catch(error => {
                    document.getElementById('searchForm').classList.remove('d-none');
                    document.getElementById('queueStatus').classList.add('d-none');
                    document.getElementById('errorMessage').textContent = error.message;
                    document.getElementById('errorMessage').classList.remove('d-none');
                });
        }

        function updateCountdown() {
            const now = new Date();
            const timeLeft = endTime - now;
            
            if (timeLeft <= 0) {
                if (countdownInterval) {
                    clearInterval(countdownInterval);
                }
                document.getElementById('countdown').textContent = "Time to check in!";
                return;
            }
            
            const minutes = Math.floor(timeLeft / 60000);
            const seconds = Math.floor((timeLeft % 60000) / 1000);
            document.getElementById('countdown').textContent = 
                `Time remaining: ${minutes}m ${seconds}s`;
        }

        // If we have a queue number on page load, start updates
        const initialQueueNumber = '@(Model?.QueueNumber ?? "")';
        if (initialQueueNumber) {
            updateQueueStatus(initialQueueNumber);
        }

        // Update status every 30 seconds
        if (initialQueueNumber) {
            setInterval(() => updateQueueStatus(initialQueueNumber), 30000);
        }
    </script>
} 